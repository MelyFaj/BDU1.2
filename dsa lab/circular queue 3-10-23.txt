#include <stdio.h>
int rear = -1 , front = -1;

int is_full(int *a, int n){
    if(front==0 && rear==n-1){
        return 1;
    }
    if(rear==front-1){
        return 1;
    }
    return 0;
}

int is_empty(int *a, int n){
    if(front==-1){
        return 1;
    }
    return 0;
}

void insert(int *a, int n, int item){
    if(is_full(a,n)){
        printf("Overflow!\n");
        return;
    }
    else if(front==-1){
        front++;
        rear++;
    }
    else if(rear<n-1){
        rear++;
    }
    else if(rear==n-1){
        rear=0;
    }
    a[rear]=item;
}

void delete(int *a, int n){
    if(front==-1){
        printf("Underflow!\n");
        return;
    }
    if(front==rear){
        front=-1;
        rear=-1;
        
        
   // printf("%d %d\n", front, rear);
    }
    else if(front==n-1){
        front=0;
    }
    else{
        front++;
    }
    
}

void display(int *a, int n){
    printf("front: %d , rear: %d\n", front, rear);
    if(front==-1 && rear==-1){
        printf("Empty queue\n");
    }
    else if(front<=rear){
        for(int i=front; i<=rear; i++){
            printf("%d ", a[i]);
        }
   }
   else if(front>rear){
        for(int i=0; i<=rear; i++){
            printf("%d ", a[i]);
        }
        for(int i=front; i<n; i++){
            printf("%d ", a[i]);
        }
        

   }
   printf("\n");
}


int main() {
    int b=1;
    int n,item;
    printf("Enter queue size: ");
    scanf("%d", &n);
    int a[n];
    while(b){
        printf("0.Exit\n1. Insert\n2. Delete\n3. Display\n");
        scanf("%d", &b);
        switch(b){
            case 0:
                break;
            case 1:
                printf("Item: ");
                scanf("%d", &item);
                insert(a, n, item);
                break;
            case 2:
                delete(a, n);
                break;
            case 3:
                display(a, n);
                break;
            default:
                break;
        }
    }

    return 0;
}