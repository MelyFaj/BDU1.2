#include <iostream>
#include <string>
#include <ctype.h>
#include <bits/stdc++.h>

class Cryptography{

		char message[101];
		short int key;

	public:
		Cryptography(){
			int b;
			cout << "1. Encrypt" << endl;
			cout << "2. Decrypt" << endl;
			cout << "Type the initial number of your selection:";
			cin >> b;
			switch(b){
			case 1:{
				encrypt();
				break;}
			case 2:{
				decrypt();
				break;}
			default:
				cout << "Invalid Choice !"<< endl;
				break;
			}
		}
		void encrypt(){
			printf("Enter non-spaced-msg<ENTER>integer key\n---------------------------------------\n");
			scanf(" %[^\n]s", message);
			scanf("%hd", &key);

			for(int i=0; message[i]!='\0'; i++){
				//if u also wish to encrypt the space then comment this & the below 'if' out
				if(message[i]==' ' && message[i+1]!='\0') i++;
				if(message[i]>=97)
					message[i] = ((((message[i]%97)+key)%26)+97-32);
				else if(message[i]<97)
					message[i] = ((((message[i]%65)+key)%26)+97-32);
			}

			printf("Encrypted: %s\n", message);
		}

		void decrypt(){
			printf("Enter non-spaced-msg<ENTER>integer key\n---------------------------------------\n");
			scanf(" %[^\n]s", message);
			scanf("%hd", &key);
			for(int i=0; message[i]!='\0'; i++){
				message[i]=toupper(message[i]);
				//if u also wish to encrypt the space then comment this and the above 'if' out
				if(message[i]==' ' && message[i+1]!='\0') i++;
				if(((message[i]%65)-key)<0)
					message[i] = (((message[i]%65)-key)+26)+97;
				else if(((message[i]%65)-key)>=0)
					message[i] = ((message[i]%65)-key)+97;
			}
			printf("Decrypted: %s\n", message);
		}
};


class NumberSystem{
	protected:
		string num;

	public:

		NumberSystem(){
			int b;
			cout << "1. Binary to Decimal" << endl;
			cout << "2. Decimal to Binary" << endl;
			cout << "3. Decimal to Octal" << endl;
			cout << "4. Decimal to Hexadecimal" << endl;
			cout << "5. Octal to Binary" << endl;
			cout << "6. Hexadecimal to Binary" << endl;
			cout << "7. Octal to Hexadecimal" << endl;
			cout << "8. Hexadecimal to Octal" << endl;
			cout << "9. Binary to Hexadecimal" << endl;
			cout << "10. Binary to Octal" << endl;
			cout << "Type the initial number of your selection:";
			cin >> b;
			switch(b){
			case 1:{
				BinToDec();
				break;}
			case 2:{
				DecToBin();
				break;}
			case 3:{
				DecToOc();
				break;}
			case 4:{
				DecToHex();
				break;}
			case 5:{
				OcToBin();
				break;}
			case 6:{
				HexToBin();
				break;}
			case 7:{
				OcToHex();
				break;}
			case 8:{
				HexToOc();
				break;}
			case 9:{
				BinToHex();
				break;}
			case 10:{
				BinToOc();
				break;}
			default:
				cout << "Invalid Choice !"<< endl;
				break;
			}
		}

		void BinToDec(){
			string b;
			cout<<"Binary: ";
			cin>>b;
			int d = stoi(b, nullptr, 2);
			cout<<"Decimal: "<<d;
		}

		void DecToBin(){
			int num;
			cout<<"Decimal = ";
			cin>>num;
			string s;
			int count=0;

			for(int i=num; i>0; i/=2){
                cout<<i%2<<endl;
				if(i%2)
					s+='1';
				else if(!(i%2) && i!=0)
					s+='0';
				count++;
			}
            
            cout<<"Binary: ";
			for(int i=count; i>=0; i--)
				cout<<s[i];
		}

        void DecToOc(){
            int n;
            cout<<"Decimal: ";
            cin>>n;
            cout<<"Octal: ";
            cout << oct << n;
        }

        void DecToHex(){
            int n ;
            cout<<"Decimal: ";
            cin>>n;
            cout<<"Hexadecimal: ";
            cout << hex << n;
        }

        void OcToDec(){
            string o;
            cout<<"Octal: ";
			cin>>o;
			int d = stoi(o, nullptr, 8);
			cout<<"Decimal: "<<d;
        }

        void HexToDec(){
            string h;
            cout<<"Hexadecimal: ";
			cin>>h;
			int d = stoi(h, nullptr, 16);
			cout<<"Decimal: "<<d;
        }

       void OcToBin() {
            string octal;
            cout<<"Octal: ";
			cin>>octal;
			int d = stoi(octal, nullptr, 8);

			string s;
			int count=0;

			for(int i=d; i>0; i/=2){
				if(i%2)
					s+='1';
				else if(!(i%2) && i!=0)
					s+='0';
				count++;
			}
            
            cout<<"Binary: ";
			for(int i=count; i>=0; i--)
				cout<<s[i];
        }

        void HexToBin()
        {
            string hex;
            cout<<"Hexadecimal: ";
			cin>>hex;
            string result = bitset<16>(stoul(hex, nullptr, 16)).to_string();
            cout<<"Binary: "<< result;
        }

        void OcToHex(){
            string o;
            cout<<"Octal: ";
			cin>>o;
			int d = stoi(o, nullptr, 8);
            cout<<"Hexadecimal: ";
            cout << hex << d;
        }

        void HexToOc(){
            string h;
            cout<<"Hexadecimal: ";
			cin>>h;
			int d = stoi(h, nullptr, 16);
            cout<<"Octal: ";
            cout << oct << d;
        }

        void BinToHex(){
            string b;
            cout<<"Binary: ";
			cin>>b;
			int d = stoi(b, nullptr, 2);
            cout<<"Hexadecimal: ";
            cout << hex << d;
        }

        void BinToOc(){
            string b;
            cout<<"Binary: ";
			cin>>b;
			int d = stoi(b, nullptr, 2);
            cout<<"Octal: ";
            cout << oct << d;
        }

};

void BitWiseOper(){
    int operation,j,n;
    char s[5];
    printf("enter operation:\n '1' for Shifting,\n '2' for Adding,\n '3' for Removing,\n '4' Checking,\n '5' for Toggling,\n '6' for finding LSB (least significant bit)\n '7' for finding MSB (most significant bit)\n");
    printf("Enter: ");
    scanf("%d", &operation);
    if(operation==1){
        printf("To Left shift, , input format: 'your number' << '#rooms'\nTo Right shift, , input format: 'your number' >> '#rooms'\n"); 
    scanf(" %d%[<> ]%d",&n, s, &j);
    if(s[0]=='<' & s[1]=='<' || s[1]=='<' & s[2]=='<')
        printf("%d\n", n<<j);
    else if(s[0]=='>' & s[1]=='>' || s[1]=='>' & s[2]=='>')
        printf("%d\n", n>>j);
    else
         printf("Invalid!");
    
    
    }

    else if(operation==2){
        printf("Enter the number & the position of which bit to add(from right to left, starts at 0):\n");
        scanf("%d%d", &n, &j);
        printf("%d\n", n|(1<<(j)));
    }
    else if(operation==3){
        printf("Enter the number & the position of which bit to remove(from right to left, starts at 0):\n");
        scanf("%d%d", &n, &j);
        printf("%d\n", n&(~(1<<(j))));
    }

    else if(operation==4){
        printf("Enter the number & the position of which bit to check(from right to left, starts at 0):\n");
        scanf("%d%d", &n, &j);
        printf("%d\n", n&(1<<(j)));
    }

    else if(operation==5){
        printf("Enter the number & the position of which bit to toggle(from right to left, starts at 0):\n");
        scanf("%d%d", &n, &j);
        printf("%d\n", n^(1<<(j)));
    }

    else if(operation==6){
        printf("Enter the number: ");
        scanf("%d", &n);
        printf("%d\n", n&(-n));
    }
    else if(operation==7){
        long int n, msb;
        printf("Enter the number: ");
        scanf("%ld", &n);
        msb = 1<<((int)(log(n)/log(2)));
        printf("%d", msb);
    }
    else
     printf("Invalid!");

}

void prime(){
    int n;
    cout<<"Enter 0 to break out.\n";
    while(1){
    cout<<"Enter number: ";
    scanf(" %d", &n);
    if(n==0) break;
    else if(n==1)
        printf("Not Prime.\n");
    else if(n==2)
        printf("Prime!\n");
    for(int i=2; i<n; i++){
        if((n/i)<i && n%i!=0){
            printf("Prime!\n");
            break;
        }
        else if(n%i==0){
            printf("Not Prime. The least divisor: %d\n", i);
            break;
        }
    }
    }
}